{
  classHeader="license.txt"
  generate=[java="8" names="long"]

  parserClass="io.chengguo.api.debugger.lang.parser.ApiParser"
  parserUtilClass="io.chengguo.api.debugger.lang.parser.ApiParserUtil"

  implements="io.chengguo.api.debugger.lang.psi.ApiElement"
  extends="io.chengguo.api.debugger.lang.psi.impl.ApiElementImpl"

  psiClassPrefix="Api"
  psiImplClassSuffix="Impl"
  psiPackage="io.chengguo.api.debugger.lang.psi"
  psiImplPackage="io.chengguo.api.debugger.lang.psi.impl"
  psiImplUtilClass="io.chengguo.api.debugger.lang.psi.impl.ApiPsiImplUtil"
  psiTreeUtilClass="io.chengguo.api.debugger.lang.psi.ApiPsiTreeUtil"

  elementTypePrefix="Api_"
  elementTypeHolderClass="io.chengguo.api.debugger.lang.psi.ApiTypes"
  elementTypeClass="io.chengguo.api.debugger.lang.psi.ApiElementType"
  tokenTypeClass="io.chengguo.api.debugger.lang.psi.ApiTokenType"

  tokens=[
    COLON                   = ":"
    SLASH                   = "/"
    SCHEME_SEPARATOR        = "://"
    HTTP                    = "http"
    HTTPS                   = "https"
    QUESTION_MARK           = "?"
    EQUALS                  = "="
    AMPERSAND               = "&"
    LBRACES                 = "{{"
    RBRACES                 = "}}"
    HYPHEN                  = "-"
    SEMICOLON               = ";"
    INPUT_SIGNAL            = "< "

    //methods
    OPTIONS                 = "OPTIONS"
    GET                     = "GET"
    HEAD                    = "HEAD"
    POST                    = "POST"
    PUT                     = "PUT"
    DELETE                  = "DELETE"
    TRACE                   = "TRACE"
    CONNECT                 = "CONNECT"
  ]

  implements("request") = "io.chengguo.api.debugger.lang.psi.ApiRequestElement"
  extends("request") = "io.chengguo.api.debugger.lang.psi.impl.ApiRequestMixin"
  implements("description|header_field") = "io.chengguo.api.debugger.lang.psi.ApiKeyValueElement"
  extends("description") = "io.chengguo.api.debugger.lang.psi.impl.ApiDescriptionMixin"
  implements("variable") = "io.chengguo.api.debugger.lang.psi.ApiNamedElement"
  extends("variable") = "io.chengguo.api.debugger.lang.psi.impl.ApiVariableMixin"
  extends("request_message_group") = "io.chengguo.api.debugger.lang.psi.impl.ApiBodyMixin"
  extends("header_field") = "io.chengguo.api.debugger.lang.psi.impl.ApiHeaderFieldMixin"
  extends("file_path") = "io.chengguo.api.debugger.lang.psi.impl.ApiFilePathMixin"
  implements("api_block") = "io.chengguo.api.debugger.lang.psi.ApiBlockElement"
  extends("api_block") = "io.chengguo.api.debugger.lang.psi.impl.ApiBlockMixin"
  implements("request_target")="io.chengguo.api.debugger.lang.psi.ApiRequestTargetElement"
  extends("request_target")="io.chengguo.api.debugger.lang.psi.impl.ApiRequestTargetMixin"
}

apiFile ::= api_*

private api_ ::= api_block (SEPARATOR api_block?)*

api_block ::= comment* description* comment* request {
    recoverWhile=recover_api_block
}

description ::= '-' DESCRIPTION_KEY ':' LINE_TEXT? {pin=1}

request ::= request_line header_field* request_body?

request_line ::= method request_target

method ::= OPTIONS | GET | HEAD | POST | PUT | DELETE | TRACE | CONNECT | PATCH

request_target ::= full_scheme? host full_port? path_segments path_query?

private full_scheme ::= scheme '://'

private full_port ::= ':' port

scheme ::= 'http' | 'https'

host ::= (variable | HOST_VALUE)+

port ::= (variable | PORT_SEGMENT)+

private path_segments ::= segment_block*

segment_block ::= '/' SEGMENT?

private path_query ::= '?' query

query ::= query_parameter ('&' query_parameter)*
query_parameter ::= query_parameter_key ('=' query_parameter_value)?
query_parameter_key ::= (variable | QUERY_NAME)+
query_parameter_value ::= (variable | QUERY_VALUE)+

header_field ::= header_field_key (':' header_field_val?)?
header_field_key ::= (variable | HEADER_FIELD_NAME)+
header_field_val ::= header_field_val_item (';' header_field_val_item?)*
private header_field_val_item ::= (variable | HEADER_FIELD_VALUE)+

request_body ::= request_message_group  | multipart_message
request_message_group ::= (MESSAGE_TEXT | input_file)+
input_file ::= '< ' file_path {pin=1}
file_path ::= RELATIVE_FILE_PATH
multipart_message ::= MESSAGE_BOUNDARY (multipart_field MESSAGE_BOUNDARY)* (multipart_field MESSAGE_BOUNDARY_END)
multipart_field ::= header_field* request_message_group?

variable ::= '{{' IDENTIFIER? '}}' {
    pin=1
}

private comment ::= LINE_COMMENT | MULTILINE_COMMENT

private recover_api_block ::= !(SEPARATOR)