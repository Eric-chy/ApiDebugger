{
  classHeader="license.txt"
  generate=[java="8" names="long" visitor-value="R"]

  parserClass="io.chengguo.api.debugger.lang.parser.ApiParser"
  parserUtilClass="io.chengguo.api.debugger.lang.parser.ApiParserUtil"

  implements="io.chengguo.api.debugger.lang.psi.ApiElement"
  extends="io.chengguo.api.debugger.lang.psi.impl.ApiElementImpl"

  psiClassPrefix="Api"
  psiImplClassSuffix="Impl"
  psiPackage="io.chengguo.api.debugger.lang.psi"
  psiImplPackage="io.chengguo.api.debugger.lang.psi.impl"
  psiImplUtilClass="io.chengguo.api.debugger.lang.psi.impl.ApiPsiImplUtil"

  elementTypeHolderClass="io.chengguo.api.debugger.lang.psi.ApiTypes"
  elementTypePrefix="Api_"
  elementTypeClass="io.chengguo.api.debugger.lang.psi.ApiElementType"
  tokenTypeClass="io.chengguo.api.debugger.lang.psi.ApiTokenType"

  tokens=[
    COLON                   = ":"
    SLASH                   = "/"
    SCHEME_SEPARATOR        = "://"
    HTTP                    = "http"
    HTTPS                   = "https"
    QUESTION_MARK           = "?"
    EQUALS                  = "="
    AMPERSAND               = "&"
    LBRACES                 = "{{"
    RBRACES                 = "}}"
  ]
}

apiFile ::= api_*

private api_ ::= ( api_block | variable | LINE_COMMENT | MULTILINE_COMMENT)

api_block ::= description request

description ::= description_title description_content
description_title ::= '-' 'title' ':' LINE_TEXT
description_content ::= '-' 'description' ':' LINE_TEXT

request ::= request_line header_field* message_body SEPARATOR

request_line ::= METHOD request_target

request_target ::= scheme '://' host ':' port path_absolute{pin=1}
scheme ::= 'http' | 'https'
host ::= HOST_VALUE
port ::= PORT_SEGMENT

path_absolute ::= path_segment* path_query?
private path_segment ::= '/' SEGMENT? {pin=1}
private path_query ::= '?' query

query ::= query_parameter ('&' query_parameter)*
query_parameter ::= query_parameter_key ('=' query_parameter_value)?
query_parameter_key ::= QUERY_NAME
query_parameter_value ::= QUERY_VALUE

header_field ::= HEADER_FIELD_NAME (':' HEADER_FIELD_VALUE?)? {
    methods = [getName getValue]
}

private message_body ::= request_message_group /* | multipart_message*/
request_message_group ::= MESSAGE_TEXT

variable ::= '{{' variable_name '}}'

variable_name ::= IDENTIFIER