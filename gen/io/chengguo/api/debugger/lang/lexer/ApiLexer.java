/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package io.chengguo.api.debugger.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.LinkedList;

import com.intellij.psi.TokenType;
import static io.chengguo.api.debugger.lang.psi.ApiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/fingerart/Workspace/JAVA/ApiDebugger/grammars/Api.flex</tt>
 */
public class ApiLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_HTTP_REQUEST = 2;
  public static final int IN_HTTP_PATH = 4;
  public static final int IN_HTTP_REQUEST_HOST = 6;
  public static final int IN_HTTP_REQUEST_PORT = 8;
  public static final int IN_HTTP_PATH_SEGMENT = 10;
  public static final int IN_HTTP_QUERY = 12;
  public static final int IN_HTTP_QUERY_VALUE = 14;
  public static final int IN_HEADER = 16;
  public static final int IN_HEADER_VALUE = 18;
  public static final int IN_MESSAGE_BODY = 20;
  public static final int IN_VARIABLE = 22;
  public static final int IN_DESCRIPTION = 24;
  public static final int IN_DESCRIPTION_KEY = 26;
  public static final int IN_DESCRIPTION_VALUE = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\35\2\0\1\42\2\0\1\45\3\0\1\11\2\0\1\33\1"+
    "\0\1\10\12\7\1\34\2\0\1\44\1\0\1\43\1\0\1\23\1\6\1\30\1\24\1\21\1\6\1\20\1"+
    "\22\1\15\2\6\1\26\1\6\1\16\1\12\1\13\1\6\1\27\1\17\1\14\1\25\5\6\4\0\1\6\1"+
    "\0\7\6\1\36\7\6\1\40\2\6\1\41\1\37\6\6\1\31\1\0\1\32\7\0\1\1\242\0\2\1\26"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\10\1\1\3\1\4\1\5\7\1"+
    "\2\6\1\7\1\6\1\10\1\11\1\6\1\12\2\13"+
    "\1\14\1\13\1\14\1\1\1\14\1\15\2\16\3\17"+
    "\1\20\3\21\1\22\1\23\5\2\1\24\2\25\2\26"+
    "\2\2\1\27\1\2\1\30\1\1\2\26\1\31\1\32"+
    "\2\33\1\2\2\34\1\2\1\35\1\36\21\0\1\6"+
    "\1\37\1\0\1\23\1\40\1\4\1\41\1\25\1\42"+
    "\1\0\1\4\1\36\1\0\1\43\4\0\1\44\2\0"+
    "\1\45\1\0\1\46\3\0\1\47\1\6\1\23\1\36"+
    "\6\0\1\50\1\0\1\51\2\0\1\52\3\0\1\53"+
    "\2\0\1\54\2\0\1\55\1\0\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u023a"+
    "\0\u05ca\0\u05f0\0\u023a\0\u0616\0\u063c\0\u0662\0\u0688\0\u023a"+
    "\0\u06ae\0\u03dc\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792"+
    "\0\u023a\0\u07b8\0\u07de\0\u0804\0\u023a\0\u082a\0\u0850\0\u0876"+
    "\0\u089c\0\u08c2\0\u08e8\0\u023a\0\u090e\0\u0934\0\u095a\0\u0980"+
    "\0\u09a6\0\u09cc\0\u09f2\0\u017c\0\u0a18\0\u0a3e\0\u03dc\0\u0a64"+
    "\0\u023a\0\u023a\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u023a\0\u082a\0\u0850\0\u0876"+
    "\0\u0e66\0\u095a\0\u0e8c\0\u023a\0\u0a8a\0\u0ab0\0\u0eb2\0\u0ed8"+
    "\0\u023a\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2"+
    "\0\u023a\0\u1008\0\u023a\0\u102e\0\u1054\0\u107a\0\u023a\0\u10a0"+
    "\0\u0e66\0\u023a\0\u0eb2\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e"+
    "\0\u023a\0\u1184\0\u023a\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242"+
    "\0\u1268\0\u023a\0\u128e\0\u12b4\0\u0532\0\u12da\0\u1300\0\u023a"+
    "\0\u1326\0\u023a\0\u023a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\5\21\2\20\1\22\1\20\1\23\1\24\1\25"+
    "\3\20\1\26\1\20\1\27\1\20\1\30\3\20\1\31"+
    "\2\20\1\32\1\20\1\21\11\20\3\33\2\34\4\20"+
    "\1\35\1\36\1\37\3\20\1\40\1\20\1\41\1\20"+
    "\1\42\3\20\1\43\4\20\1\34\10\20\1\44\1\45"+
    "\2\46\1\47\1\45\2\44\1\50\23\44\1\51\1\47"+
    "\1\52\3\44\1\20\1\53\2\44\1\54\1\55\2\56"+
    "\1\57\1\55\2\54\1\60\20\54\1\61\2\54\1\60"+
    "\1\57\4\54\2\60\2\54\1\20\1\33\2\62\2\33"+
    "\1\20\1\63\1\60\20\20\1\61\3\20\1\33\4\20"+
    "\2\60\2\20\1\64\1\65\2\62\2\65\2\64\1\60"+
    "\24\64\1\65\4\64\2\60\2\64\1\66\1\67\2\56"+
    "\1\70\1\67\23\66\1\61\3\66\1\70\6\66\1\71"+
    "\1\66\1\72\1\73\2\56\1\74\1\73\23\72\1\61"+
    "\3\72\1\74\7\72\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\23\76\1\61\2\76\1\104\1\102\10\76"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\23\105\1\61"+
    "\3\105\1\102\10\105\1\113\1\114\4\21\27\113\1\21"+
    "\10\113\1\20\5\33\1\115\3\20\17\115\1\20\1\116"+
    "\2\20\1\33\4\115\5\20\2\117\1\120\2\102\25\20"+
    "\1\121\1\122\1\102\10\20\1\123\1\124\2\33\2\125"+
    "\26\123\1\20\1\102\10\123\1\126\1\127\1\117\1\120"+
    "\2\130\27\126\1\102\10\126\47\0\5\21\27\0\1\21"+
    "\20\0\1\131\1\132\47\0\1\133\44\0\1\134\12\0"+
    "\1\135\47\0\1\136\37\0\1\135\45\0\1\137\45\0"+
    "\1\140\36\0\1\141\66\0\1\142\13\0\5\33\27\0"+
    "\1\33\11\0\3\33\2\34\27\0\1\34\23\0\1\143"+
    "\44\0\1\144\12\0\1\145\47\0\1\146\37\0\1\147"+
    "\45\0\1\150\45\0\1\151\36\0\1\152\33\0\2\44"+
    "\2\0\4\44\1\0\23\44\1\0\5\44\2\0\3\44"+
    "\1\45\2\46\1\47\1\45\2\44\1\0\23\44\1\0"+
    "\1\47\4\44\2\0\2\44\1\0\3\46\1\33\1\46"+
    "\27\0\1\33\10\0\1\44\1\47\2\33\2\47\2\44"+
    "\1\0\23\44\1\0\1\47\4\44\2\0\2\44\10\0"+
    "\1\153\35\0\2\44\2\0\4\44\1\0\23\44\1\0"+
    "\2\44\1\154\2\44\2\0\2\44\2\54\2\0\4\54"+
    "\1\0\20\54\1\0\2\54\1\0\5\54\2\0\3\54"+
    "\1\55\2\56\1\57\1\55\2\54\1\0\20\54\1\0"+
    "\2\54\1\0\1\57\4\54\2\0\2\54\1\0\3\56"+
    "\1\33\1\56\27\0\1\33\10\0\1\54\1\57\2\33"+
    "\2\57\2\54\1\0\20\54\1\0\2\54\1\0\1\57"+
    "\4\54\2\0\2\54\31\0\1\155\23\0\1\63\36\0"+
    "\2\64\2\0\4\64\1\0\31\64\2\0\3\64\1\65"+
    "\2\33\2\65\2\64\1\0\24\64\1\65\4\64\2\0"+
    "\2\64\2\66\2\0\25\66\1\0\12\66\1\0\2\66"+
    "\1\67\2\56\1\70\1\67\23\66\1\0\3\66\1\70"+
    "\6\66\1\0\2\66\1\70\2\33\2\70\23\66\1\0"+
    "\3\66\1\70\6\66\1\0\1\66\2\72\2\0\25\72"+
    "\1\0\13\72\1\0\1\72\1\73\2\56\1\74\1\73"+
    "\23\72\1\0\3\72\1\74\7\72\1\0\1\72\1\74"+
    "\2\33\2\74\23\72\1\0\3\72\1\74\7\72\1\0"+
    "\2\76\1\0\1\76\2\0\23\76\1\0\2\76\1\0"+
    "\1\156\11\76\1\157\1\160\1\157\1\33\1\160\23\76"+
    "\1\0\2\76\1\0\1\161\10\76\1\0\3\160\1\33"+
    "\1\160\27\0\1\33\10\0\1\76\1\157\1\100\1\157"+
    "\1\33\1\160\23\76\1\0\2\76\1\0\1\161\10\76"+
    "\1\0\3\33\2\102\27\0\1\102\11\0\3\160\1\102"+
    "\1\103\27\0\1\102\10\0\2\105\2\0\25\105\1\0"+
    "\15\105\1\106\2\162\1\163\1\106\23\105\1\0\3\105"+
    "\1\163\10\105\1\0\3\162\1\33\1\162\27\0\1\33"+
    "\11\0\1\162\1\107\1\162\1\33\1\162\27\0\1\33"+
    "\10\0\1\105\1\163\2\33\2\111\23\105\1\0\3\105"+
    "\1\111\11\105\1\106\2\162\1\111\1\112\23\105\1\0"+
    "\3\105\1\111\10\105\2\113\4\0\27\113\1\0\10\113"+
    "\6\0\2\115\2\0\17\115\5\0\4\115\36\0\1\164"+
    "\14\0\1\33\1\117\3\33\27\0\1\33\10\0\2\123"+
    "\2\0\30\123\1\0\1\165\11\123\1\124\2\33\2\124"+
    "\26\123\1\0\1\166\11\123\1\124\2\33\2\125\26\123"+
    "\1\0\1\125\10\123\2\126\2\0\43\126\1\127\2\33"+
    "\2\127\27\126\1\127\11\126\1\127\2\33\2\130\27\126"+
    "\1\130\10\126\2\131\2\0\42\131\11\132\1\167\34\132"+
    "\14\0\1\170\50\0\1\135\42\0\1\171\54\0\1\172"+
    "\45\0\1\173\50\0\1\174\35\0\1\175\62\0\1\176"+
    "\26\0\1\177\50\0\1\200\42\0\1\201\54\0\1\202"+
    "\36\0\1\203\54\0\1\204\50\0\1\205\35\0\1\206"+
    "\37\0\1\207\35\0\2\44\2\0\4\44\1\0\23\44"+
    "\1\0\2\44\1\210\2\44\2\0\2\44\1\76\1\211"+
    "\1\33\1\211\2\33\23\76\1\0\2\76\1\0\1\161"+
    "\10\76\1\105\1\163\2\33\2\163\23\105\1\0\3\105"+
    "\1\163\10\105\10\132\1\212\1\213\34\132\15\0\1\214"+
    "\60\0\1\215\41\0\1\171\42\0\1\216\42\0\1\217"+
    "\27\0\2\176\2\0\42\176\15\0\1\220\44\0\1\221"+
    "\61\0\1\222\41\0\1\223\42\0\1\224\42\0\1\225"+
    "\27\0\2\44\2\0\4\44\1\0\23\44\1\0\3\44"+
    "\1\226\1\44\2\0\2\44\12\0\1\227\54\0\1\171"+
    "\40\0\1\215\52\0\1\230\36\0\1\231\54\0\1\232"+
    "\40\0\1\233\52\0\1\234\24\0\2\44\2\0\4\44"+
    "\1\0\23\44\1\0\4\44\1\235\2\0\2\44\16\0"+
    "\1\236\57\0\1\135\33\0\1\237\50\0\1\240\54\0"+
    "\1\241\34\0\1\171\45\0\1\242\42\0\1\243\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4940];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\27\1\1\11\2\1\1\11\4\1\1\11"+
    "\10\1\1\11\3\1\1\11\6\1\1\11\14\1\2\11"+
    "\10\1\21\0\1\1\1\11\1\0\5\1\1\11\1\0"+
    "\2\1\1\0\1\11\4\0\1\1\2\0\1\11\1\0"+
    "\1\11\3\0\1\11\2\1\1\11\6\0\1\11\1\0"+
    "\1\11\2\0\1\1\3\0\1\11\2\0\1\1\2\0"+
    "\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** stack for saving lexical states */
  private java.util.Stack<Integer> zzLexicalStateStack =
      new java.util.Stack<>();

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Creates a new scanner
     */
    public ApiLexer() {
        this(null);
    }

    /**
     * 切换状态，会记录切换前的状态
     *
     * @param newState
     */
    public void pushState(int newState) {
        yypush();
        yybegin(newState);
    }

    /**
     * 切换至上一个状态
     */
    public void popState() {
        yypop();
    }

    /**
     * 当路径匹配完成，切换至下一个状态
     */
    private void onPathFinish() {
        if (yylength() == 1) {
            yypushback(yylength());
            pushState(IN_HEADER);
        } else {
            yypushback(yylength());
            pushState(IN_MESSAGE_BODY);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ApiLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Saves the current lexical state onto stack
   */
  public final void yypush() {
    zzLexicalStateStack.push(yystate());
  }

  /**
   * Loads the current lexical state from stack
   */
  public final void yypop() {
    yybegin(zzLexicalStateStack.pop());
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 3: 
            { yypushback(yylength()); pushState(IN_DESCRIPTION);
            } 
            // fall through
          case 50: break;
          case 4: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 51: break;
          case 5: 
            { pushState(IN_HTTP_PATH); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 52: break;
          case 6: 
            { yypushback(yylength()); pushState(IN_HTTP_REQUEST_HOST);
            } 
            // fall through
          case 53: break;
          case 7: 
            { onPathFinish();
            } 
            // fall through
          case 54: break;
          case 8: 
            { pushState(IN_HTTP_PATH_SEGMENT); return Api_SLASH;
            } 
            // fall through
          case 55: break;
          case 9: 
            { pushState(IN_HTTP_REQUEST_PORT); return Api_COLON;
            } 
            // fall through
          case 56: break;
          case 10: 
            { pushState(IN_HTTP_QUERY); return Api_QUESTION_MARK;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return Api_HOST_VALUE;
            } 
            // fall through
          case 58: break;
          case 12: 
            { yypushback(yylength()); popState();
            } 
            // fall through
          case 59: break;
          case 13: 
            { return Api_PORT_SEGMENT;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return Api_SEGMENT;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return Api_QUERY_NAME;
            } 
            // fall through
          case 62: break;
          case 16: 
            { pushState(IN_HTTP_QUERY_VALUE); return Api_EQUALS;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return Api_QUERY_VALUE;
            } 
            // fall through
          case 64: break;
          case 18: 
            { popState(); return Api_AMPERSAND;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return Api_HEADER_FIELD_NAME;
            } 
            // fall through
          case 66: break;
          case 20: 
            { pushState(IN_HEADER_VALUE); return Api_COLON;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return Api_HEADER_FIELD_VALUE;
            } 
            // fall through
          case 68: break;
          case 22: 
            { popState(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 23: 
            { pushState(YYINITIAL); return Api_MESSAGE_TEXT;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return Api_IDENTIFIER;
            } 
            // fall through
          case 71: break;
          case 25: 
            { pushState(IN_DESCRIPTION_KEY); return Api_HYPHEN;
            } 
            // fall through
          case 72: break;
          case 26: 
            { pushState(IN_DESCRIPTION_VALUE); return Api_COLON;
            } 
            // fall through
          case 73: break;
          case 27: 
            { popState(); return Api_DESCRIPTION_KEY;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return Api_LINE_TEXT;
            } 
            // fall through
          case 75: break;
          case 29: 
            { return Api_LINE_COMMENT;
            } 
            // fall through
          case 76: break;
          case 30: 
            { return Api_MULTILINE_COMMENT;
            } 
            // fall through
          case 77: break;
          case 31: 
            { pushState(IN_VARIABLE); return Api_LBRACES;
            } 
            // fall through
          case 78: break;
          case 32: 
            { pushState(IN_MESSAGE_BODY); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 33: 
            { pushState(IN_MESSAGE_BODY);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 80: break;
          case 34: 
            { popState(); return Api_RBRACES;
            } 
            // fall through
          case 81: break;
          case 35: 
            { yypushback(yylength()); pushState(IN_HTTP_REQUEST);
            } 
            // fall through
          case 82: break;
          case 36: 
            { return Api_SEPARATOR;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return Api_PUT;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return Api_GET;
            } 
            // fall through
          case 85: break;
          case 39: 
            { return Api_SCHEME_SEPARATOR;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return Api_POST;
            } 
            // fall through
          case 87: break;
          case 41: 
            { return Api_HEAD;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return Api_HTTP;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return Api_TRACE;
            } 
            // fall through
          case 90: break;
          case 44: 
            { return Api_HTTPS;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return Api_DELETE;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return Api_OPTIONS;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return Api_CONNECT;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
