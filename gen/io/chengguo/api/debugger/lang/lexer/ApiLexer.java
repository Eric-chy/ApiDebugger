/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package io.chengguo.api.debugger.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.LinkedList;

import com.intellij.psi.TokenType;
import static io.chengguo.api.debugger.lang.psi.ApiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/fingerart/Workspace/Other/ApiDebugger/grammar/Api.flex</tt>
 */
class ApiLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_HTTP_REQUEST = 2;
  public static final int IN_HTTP_PATH = 4;
  public static final int IN_HTTP_REQUEST_HOST = 6;
  public static final int IN_HTTP_REQUEST_PORT = 8;
  public static final int IN_HTTP_PATH_SEGMENT = 10;
  public static final int IN_HTTP_QUERY = 12;
  public static final int IN_HTTP_QUERY_VALUE = 14;
  public static final int IN_HEADER = 16;
  public static final int IN_HEADER_VALUE = 18;
  public static final int IN_MESSAGE_BODY = 20;
  public static final int IN_VARIABLE = 22;
  public static final int IN_DESCRIPTION = 24;
  public static final int IN_DESCRIPTION_KEY = 26;
  public static final int IN_DESCRIPTION_VALUE = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\2\0\1\42\2\0\1\44\3\0\1\11\2\0\1\34\1\0"+
    "\1\10\12\7\1\33\2\0\1\43\1\0\1\41\1\0\1\23\1\6\1\30\1\24\1\21\1\6\1\20\1\22"+
    "\1\15\2\6\1\26\1\6\1\16\1\12\1\13\1\6\1\27\1\17\1\14\1\25\5\6\4\0\1\6\1\0"+
    "\7\6\1\35\7\6\1\37\2\6\1\40\1\36\6\6\1\31\1\0\1\32\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\10\1\1\3\7\1\1\4\2\2"+
    "\1\5\1\6\1\1\1\7\3\10\1\11\1\1\1\12"+
    "\1\11\1\13\2\14\3\15\1\16\3\17\1\20\1\21"+
    "\4\2\1\22\2\23\2\24\2\2\1\25\1\2\1\26"+
    "\1\1\2\24\1\27\1\30\2\31\2\32\1\33\1\34"+
    "\21\0\1\35\1\21\1\36\1\37\1\23\1\40\1\34"+
    "\1\0\1\41\4\0\1\42\1\0\1\43\4\0\1\44"+
    "\1\0\1\34\11\0\1\45\4\0\1\46\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b"+
    "\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353"+
    "\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b"+
    "\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u022b\0\u0534\0\u0559\0\u022b"+
    "\0\u057e\0\u05a3\0\u05c8\0\u022b\0\u05ed\0\u0612\0\u0612\0\u0637"+
    "\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u022b\0\u0715\0\u073a"+
    "\0\u075f\0\u022b\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u022b"+
    "\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b\0\u0172"+
    "\0\u0940\0\u0965\0\u0612\0\u098a\0\u022b\0\u022b\0\u09af\0\u09d4"+
    "\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc"+
    "\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24"+
    "\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u022b\0\u07a9\0\u07ce"+
    "\0\u0887\0\u0d02\0\u022b\0\u0d27\0\u0d4c\0\u022b\0\u0d71\0\u0d96"+
    "\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u022b\0\u0e4f\0\u0e74\0\u0e99"+
    "\0\u0ebe\0\u022b\0\u0ee3\0\u022b\0\u0d27\0\u0f08\0\u0f2d\0\u0f52"+
    "\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a"+
    "\0\u109f\0\u10c4\0\u022b\0\u10e9\0\u110e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\5\21\2\20\1\22\1\20\1\23\1\24\1\25"+
    "\3\20\1\26\1\20\1\27\1\20\1\30\3\20\1\31"+
    "\3\20\1\32\11\20\5\21\4\20\1\33\1\34\1\35"+
    "\3\20\1\36\1\20\1\37\1\20\1\40\3\20\1\41"+
    "\15\20\3\42\1\43\1\44\2\20\1\45\22\20\1\46"+
    "\1\20\1\47\3\20\1\50\3\20\1\51\1\52\2\42"+
    "\1\53\1\52\2\51\1\54\20\51\1\55\1\51\1\54"+
    "\5\51\2\54\2\51\1\20\1\56\2\57\2\56\1\20"+
    "\1\60\1\54\20\20\1\55\7\20\2\54\2\20\1\61"+
    "\1\62\2\57\2\62\2\61\1\54\30\61\2\54\2\61"+
    "\1\63\1\64\2\42\1\65\1\64\23\63\1\55\11\63"+
    "\1\66\1\63\1\67\1\70\2\42\1\71\1\70\23\67"+
    "\1\55\12\67\1\72\1\73\1\74\1\75\1\76\1\43"+
    "\1\77\23\73\1\55\1\73\1\100\11\73\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\23\101\1\55\13\101\1\107"+
    "\1\110\4\21\37\107\1\20\5\56\1\111\3\20\17\111"+
    "\1\20\1\112\2\20\4\111\5\20\2\113\1\114\2\43"+
    "\25\20\1\115\1\116\10\20\1\117\1\120\2\56\2\120"+
    "\25\117\1\20\11\117\1\121\1\122\1\113\1\114\2\122"+
    "\37\121\46\0\5\21\47\0\1\123\1\124\46\0\1\125"+
    "\43\0\1\126\12\0\1\127\46\0\1\130\36\0\1\127"+
    "\44\0\1\131\44\0\1\132\35\0\1\133\66\0\1\134"+
    "\23\0\1\135\43\0\1\136\12\0\1\137\46\0\1\140"+
    "\36\0\1\137\44\0\1\141\44\0\1\142\35\0\1\143"+
    "\33\0\3\42\1\56\1\42\40\0\3\56\2\43\40\0"+
    "\3\42\1\43\1\44\47\0\1\144\72\0\1\145\6\0"+
    "\2\51\2\0\4\51\1\0\20\51\1\0\1\51\1\0"+
    "\5\51\2\0\3\51\1\52\2\42\1\53\1\52\2\51"+
    "\1\0\20\51\1\0\1\51\1\0\5\51\2\0\3\51"+
    "\1\53\2\56\2\53\2\51\1\0\20\51\1\0\1\51"+
    "\1\0\5\51\2\0\2\51\31\0\1\146\14\0\5\56"+
    "\46\0\1\60\35\0\2\61\2\0\4\61\1\0\30\61"+
    "\2\0\3\61\1\62\2\56\2\62\2\61\1\0\30\61"+
    "\2\0\2\61\2\63\2\0\25\63\1\0\11\63\1\0"+
    "\2\63\1\64\2\42\1\65\1\64\23\63\1\0\11\63"+
    "\1\0\2\63\1\65\2\56\2\65\23\63\1\0\11\63"+
    "\1\0\1\63\2\67\2\0\25\67\1\0\12\67\1\0"+
    "\1\67\1\70\2\42\1\71\1\70\23\67\1\0\12\67"+
    "\1\0\1\67\1\71\2\56\2\71\23\67\1\0\12\67"+
    "\1\0\2\73\1\0\1\73\2\0\23\73\1\0\1\73"+
    "\1\0\12\73\1\147\1\150\1\147\1\56\1\150\23\73"+
    "\1\0\1\73\1\0\11\73\1\0\3\150\1\56\1\150"+
    "\37\0\1\73\1\147\1\75\1\147\1\56\1\150\23\73"+
    "\1\0\1\73\1\0\11\73\1\0\3\150\1\43\1\77"+
    "\37\0\2\101\2\0\25\101\1\0\14\101\1\102\2\151"+
    "\1\152\1\102\23\101\1\0\13\101\1\0\3\151\1\56"+
    "\1\151\40\0\1\151\1\103\1\151\1\56\1\151\37\0"+
    "\1\101\1\152\2\56\2\105\23\101\1\0\14\101\1\102"+
    "\2\151\1\105\1\106\23\101\1\0\13\101\2\107\4\0"+
    "\37\107\6\0\2\111\2\0\17\111\4\0\4\111\36\0"+
    "\1\153\13\0\1\56\1\113\3\56\37\0\2\117\2\0"+
    "\27\117\1\0\12\117\1\120\2\56\2\120\25\117\1\0"+
    "\11\117\2\121\2\0\42\121\1\122\2\56\2\122\37\121"+
    "\2\123\2\0\41\123\11\124\1\154\33\124\14\0\1\155"+
    "\47\0\1\127\41\0\1\156\53\0\1\157\44\0\1\160"+
    "\47\0\1\161\34\0\1\162\62\0\1\163\24\0\1\164"+
    "\47\0\1\137\41\0\1\165\53\0\1\166\44\0\1\167"+
    "\47\0\1\170\34\0\1\171\36\0\1\172\72\0\1\173"+
    "\6\0\1\101\1\152\2\56\2\152\23\101\1\0\13\101"+
    "\10\124\1\174\1\175\33\124\15\0\1\176\57\0\1\177"+
    "\40\0\1\156\41\0\1\200\41\0\1\201\26\0\2\163"+
    "\2\0\41\163\15\0\1\202\57\0\1\203\40\0\1\165"+
    "\41\0\1\204\41\0\1\205\65\0\1\206\17\0\1\207"+
    "\53\0\1\156\37\0\1\177\51\0\1\210\35\0\1\211"+
    "\53\0\1\165\37\0\1\203\51\0\1\212\63\0\1\213"+
    "\22\0\1\214\56\0\1\127\32\0\1\215\56\0\1\137"+
    "\33\0\1\156\44\0\1\165\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4403];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\24\1\1\11\2\1\1\11\3\1\1\11"+
    "\11\1\1\11\3\1\1\11\5\1\1\11\14\1\2\11"+
    "\6\1\21\0\1\11\4\1\1\11\1\1\1\0\1\11"+
    "\4\0\1\1\1\0\1\11\4\0\1\11\1\0\1\11"+
    "\11\0\1\1\4\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** stack for saving lexical states */
  private java.util.Stack<Integer> zzLexicalStateStack =
      new java.util.Stack<>();

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * 切换状态，会记录切换前的状态
     *
     * @param newState
     */
    public void pushState(int newState) {
        yypush();
        yybegin(newState);
    }

    /**
     * 切换至上一个状态
     */
    public void popState() {
        yypop();
    }

    /**
     * 当路径匹配完成，切换至下一个状态
     */
    private void onPathFinish() {
        if (yylength() == 1) {
            yypushback(yylength());
            pushState(IN_HEADER);
        } else {
            yypushback(yylength());
            pushState(IN_MESSAGE_BODY);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ApiLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Saves the current lexical state onto stack
   *
   * @param state the lexical state to save
   */
  public final void yypush() {
    zzLexicalStateStack.push(yystate());
  }

  /**
   * Loads the current lexical state from stack
   */
  public final void yypop() {
    yybegin(zzLexicalStateStack.pop());
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 39: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 3: 
            { yypushback(yylength()); pushState(IN_DESCRIPTION);
            } 
            // fall through
          case 41: break;
          case 4: 
            { onPathFinish();
            } 
            // fall through
          case 42: break;
          case 5: 
            { pushState(IN_HTTP_PATH_SEGMENT); return Api_SLASH;
            } 
            // fall through
          case 43: break;
          case 6: 
            { pushState(IN_HTTP_REQUEST_PORT); return Api_COLON;
            } 
            // fall through
          case 44: break;
          case 7: 
            { pushState(IN_HTTP_QUERY); return Api_QUESTION_MARK;
            } 
            // fall through
          case 45: break;
          case 8: 
            { return Api_HOST_VALUE;
            } 
            // fall through
          case 46: break;
          case 9: 
            { yypushback(yylength()); popState();
            } 
            // fall through
          case 47: break;
          case 10: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 48: break;
          case 11: 
            { return Api_PORT_SEGMENT;
            } 
            // fall through
          case 49: break;
          case 12: 
            { return Api_SEGMENT;
            } 
            // fall through
          case 50: break;
          case 13: 
            { return Api_QUERY_NAME;
            } 
            // fall through
          case 51: break;
          case 14: 
            { pushState(IN_HTTP_QUERY_VALUE); return Api_EQUALS;
            } 
            // fall through
          case 52: break;
          case 15: 
            { return Api_QUERY_VALUE;
            } 
            // fall through
          case 53: break;
          case 16: 
            { popState(); return Api_AMPERSAND;
            } 
            // fall through
          case 54: break;
          case 17: 
            { return Api_HEADER_FIELD_NAME;
            } 
            // fall through
          case 55: break;
          case 18: 
            { pushState(IN_HEADER_VALUE); return Api_COLON;
            } 
            // fall through
          case 56: break;
          case 19: 
            { return Api_HEADER_FIELD_VALUE;
            } 
            // fall through
          case 57: break;
          case 20: 
            { popState(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 58: break;
          case 21: 
            { pushState(YYINITIAL); return Api_MESSAGE_TEXT;
            } 
            // fall through
          case 59: break;
          case 22: 
            { return Api_IDENTIFIER;
            } 
            // fall through
          case 60: break;
          case 23: 
            { pushState(IN_DESCRIPTION_VALUE); return Api_COLON;
            } 
            // fall through
          case 61: break;
          case 24: 
            { pushState(IN_DESCRIPTION_KEY); return Api_HYPHEN;
            } 
            // fall through
          case 62: break;
          case 25: 
            { popState(); return Api_DESCRIPTION_KEY;
            } 
            // fall through
          case 63: break;
          case 26: 
            { return Api_LINE_TEXT;
            } 
            // fall through
          case 64: break;
          case 27: 
            { return Api_LINE_COMMENT;
            } 
            // fall through
          case 65: break;
          case 28: 
            { return Api_MULTILINE_COMMENT;
            } 
            // fall through
          case 66: break;
          case 29: 
            { pushState(IN_VARIABLE); return Api_LBRACES;
            } 
            // fall through
          case 67: break;
          case 30: 
            { pushState(IN_MESSAGE_BODY); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 31: 
            { pushState(IN_MESSAGE_BODY);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 32: 
            { popState(); return Api_RBRACES;
            } 
            // fall through
          case 70: break;
          case 33: 
            { yypushback(yylength()); pushState(IN_HTTP_REQUEST);
            } 
            // fall through
          case 71: break;
          case 34: 
            { return Api_SEPARATOR;
            } 
            // fall through
          case 72: break;
          case 35: 
            { pushState(IN_HTTP_PATH); return Api_METHOD;
            } 
            // fall through
          case 73: break;
          case 36: 
            { pushState(IN_HTTP_REQUEST_HOST); return Api_SCHEME_SEPARATOR;
            } 
            // fall through
          case 74: break;
          case 37: 
            { return Api_HTTP;
            } 
            // fall through
          case 75: break;
          case 38: 
            { return Api_HTTPS;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
