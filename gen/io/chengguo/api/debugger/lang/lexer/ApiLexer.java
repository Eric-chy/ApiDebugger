/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package io.chengguo.api.debugger.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static io.chengguo.api.debugger.lang.psi.ApiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/fingerart/Workspace/Other/ApiDebugger/grammars/Api.flex</tt>
 */
public class ApiLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_HTTP_REQUEST = 2;
  public static final int IN_HTTP_TARGET = 4;
  public static final int IN_HTTP_REQUEST_HOST = 6;
  public static final int IN_HTTP_REQUEST_PORT = 8;
  public static final int IN_HTTP_PATH_SEGMENT = 10;
  public static final int IN_HTTP_QUERY = 12;
  public static final int IN_HTTP_QUERY_VALUE = 14;
  public static final int IN_HEADER = 16;
  public static final int IN_HEADER_VALUE = 18;
  public static final int IN_BEFORE_BODY = 20;
  public static final int IN_MESSAGE_BODY = 22;
  public static final int IN_MESSAGE_MULTIPART = 24;
  public static final int IN_VARIABLE = 26;
  public static final int IN_DESCRIPTION = 28;
  public static final int IN_DESCRIPTION_KEY = 30;
  public static final int IN_DESCRIPTION_VALUE = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\32\1\1\1\0\1\32\1\1\22\0\1\2\2\0\1\40\2\0\1\43\3\0\1\6\2\0\1\30\1"+
    "\0\1\5\12\4\1\31\1\33\1\0\1\42\1\0\1\41\1\0\1\20\1\3\1\25\1\21\1\16\1\3\1"+
    "\15\1\17\1\12\2\3\1\23\1\3\1\13\1\7\1\10\1\3\1\24\1\14\1\11\1\22\5\3\4\0\1"+
    "\3\1\0\7\3\1\34\7\3\1\36\2\3\1\37\1\35\6\3\1\26\1\0\1\27\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\1\1\1\2\10\1\1\3\1\4\7\1\1\5"+
    "\1\6\1\7\1\10\1\5\1\11\1\12\2\13\1\1"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\2"+
    "\1\22\1\23\1\24\1\25\1\2\1\24\1\26\2\1"+
    "\1\27\1\1\1\30\1\1\1\25\1\2\1\31\1\32"+
    "\1\33\1\2\1\34\1\2\1\35\1\36\23\0\1\5"+
    "\1\37\1\0\1\40\2\0\1\13\1\0\1\41\5\0"+
    "\1\42\1\43\1\0\1\36\2\0\1\44\4\0\1\45"+
    "\3\0\1\46\1\0\1\47\3\0\1\50\1\5\1\0"+
    "\1\42\1\36\7\0\1\51\2\0\1\52\2\0\1\53"+
    "\1\27\1\54\3\0\1\55\1\56\2\0\1\57\2\0"+
    "\1\60\1\0\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0264\0\u0558"+
    "\0\u057c\0\u0264\0\u05a0\0\u05c4\0\u0264\0\u05e8\0\u060c\0\u0630"+
    "\0\u0654\0\u0264\0\u0678\0\u0264\0\u069c\0\u06c0\0\u06e4\0\u0708"+
    "\0\u0264\0\u072c\0\u0750\0\u0774\0\u0798\0\u0264\0\u07bc\0\u07e0"+
    "\0\u0804\0\u0828\0\u084c\0\u0870\0\u0264\0\u0894\0\u0264\0\u0264"+
    "\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4"+
    "\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4"+
    "\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4"+
    "\0\u0c18\0\u0c3c\0\u0264\0\u069c\0\u0c60\0\u06c0\0\u072c\0\u0c84"+
    "\0\u0750\0\u0ca8\0\u07bc\0\u07e0\0\u0ccc\0\u0cf0\0\u0804\0\u0d14"+
    "\0\u0264\0\u08b8\0\u0d38\0\u0d5c\0\u0d80\0\u0264\0\u0da4\0\u0dc8"+
    "\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0264\0\u0ec4"+
    "\0\u0264\0\u0ee8\0\u0f0c\0\u0f30\0\u0264\0\u0f54\0\u0f78\0\u0f9c"+
    "\0\u0264\0\u0d38\0\u0fc0\0\u0fe4\0\u1008\0\u102c\0\u1050\0\u1074"+
    "\0\u0264\0\u1098\0\u10bc\0\u0264\0\u10e0\0\u1104\0\u1128\0\u0f78"+
    "\0\u0f9c\0\u114c\0\u1170\0\u1194\0\u0264\0\u0264\0\u11b8\0\u11dc"+
    "\0\u0510\0\u1200\0\u1224\0\u0264\0\u1248\0\u0264\0\u0264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\2\23\2\22\1\24\1\22\1\25\1\26\1\27"+
    "\3\22\1\30\1\22\1\31\1\22\1\32\3\22\1\33"+
    "\2\22\1\34\1\22\1\23\13\22\1\35\4\22\1\36"+
    "\1\37\1\40\3\22\1\41\1\22\1\42\1\22\1\43"+
    "\3\22\1\44\4\22\1\35\11\22\1\45\1\46\3\45"+
    "\1\47\23\45\1\50\2\45\1\51\3\45\1\22\1\52"+
    "\2\45\1\53\1\54\3\53\1\55\20\53\1\56\2\53"+
    "\1\55\6\53\2\55\2\53\1\22\1\55\2\22\1\57"+
    "\1\55\20\22\1\56\11\22\2\55\2\22\1\60\1\54"+
    "\3\60\1\55\32\60\2\55\2\60\1\61\1\54\24\61"+
    "\1\56\13\61\1\62\1\61\1\63\1\54\24\63\1\56"+
    "\14\63\1\64\1\65\1\66\1\67\23\65\1\70\2\65"+
    "\1\71\1\67\11\65\1\72\1\73\1\74\23\72\1\75"+
    "\3\72\1\74\1\76\10\72\1\22\1\77\1\100\27\22"+
    "\1\100\11\22\1\101\2\23\27\101\1\23\11\101\30\22"+
    "\1\102\16\22\1\103\3\22\17\103\1\22\1\104\4\22"+
    "\4\103\5\22\1\105\1\106\25\22\1\107\1\110\1\106"+
    "\11\22\1\111\1\22\1\106\26\111\1\22\1\112\11\111"+
    "\1\113\1\55\1\106\27\113\1\114\11\113\45\0\2\23"+
    "\27\0\1\23\16\0\1\115\1\116\45\0\1\117\42\0"+
    "\1\120\10\0\1\121\1\0\1\122\45\0\1\123\35\0"+
    "\1\122\43\0\1\124\43\0\1\125\34\0\1\126\64\0"+
    "\1\127\15\0\1\35\27\0\1\35\21\0\1\130\42\0"+
    "\1\131\10\0\1\132\1\0\1\133\45\0\1\134\35\0"+
    "\1\135\43\0\1\136\43\0\1\137\34\0\1\140\34\0"+
    "\1\45\1\0\3\45\1\0\23\45\1\0\6\45\2\0"+
    "\2\45\1\0\1\46\47\0\1\141\36\0\1\45\1\0"+
    "\3\45\1\0\23\45\1\0\3\45\1\142\2\45\2\0"+
    "\2\45\1\53\1\0\3\53\1\0\20\53\1\0\2\53"+
    "\1\0\6\53\2\0\2\53\1\0\1\54\70\0\1\143"+
    "\21\0\1\57\37\0\1\60\1\0\3\60\1\0\32\60"+
    "\2\0\2\60\1\61\1\0\24\61\1\0\13\61\1\0"+
    "\1\61\1\63\1\0\24\63\1\0\14\63\1\0\1\65"+
    "\1\0\1\144\23\65\1\0\2\65\2\0\11\65\1\0"+
    "\1\145\43\0\1\146\1\67\27\0\1\67\11\0\1\65"+
    "\1\0\1\144\23\65\1\143\2\65\2\0\11\65\1\72"+
    "\1\0\1\147\23\72\1\0\3\72\1\147\1\0\10\72"+
    "\1\0\1\150\43\0\1\151\1\74\27\0\1\74\11\0"+
    "\1\72\1\0\1\147\23\72\1\143\3\72\1\147\1\0"+
    "\10\72\1\0\1\152\43\0\1\153\1\154\27\0\1\154"+
    "\11\0\1\155\1\156\26\155\1\157\13\155\30\0\1\160"+
    "\16\0\2\103\2\0\17\103\6\0\4\103\33\0\1\161"+
    "\16\0\1\106\27\0\1\106\11\0\1\111\1\0\1\162"+
    "\26\111\1\0\13\111\1\0\1\112\26\111\1\0\1\112"+
    "\11\111\1\113\1\0\43\113\1\0\1\114\27\113\1\114"+
    "\11\113\1\115\1\0\42\115\6\116\1\163\35\116\11\0"+
    "\1\164\46\0\1\122\40\0\1\165\43\0\1\166\52\0"+
    "\1\167\43\0\1\170\46\0\1\171\33\0\1\172\60\0"+
    "\1\173\24\0\1\174\46\0\1\175\40\0\1\176\43\0"+
    "\1\177\52\0\1\200\34\0\1\201\52\0\1\202\46\0"+
    "\1\203\33\0\1\204\35\0\1\205\36\0\1\45\1\0"+
    "\3\45\1\0\23\45\1\0\3\45\1\206\2\45\2\0"+
    "\2\45\1\0\2\145\27\0\1\145\12\0\2\150\27\0"+
    "\1\150\12\0\2\152\27\0\1\152\11\0\1\207\1\156"+
    "\26\207\1\157\13\207\1\101\1\156\26\101\1\0\13\101"+
    "\1\160\2\0\25\160\1\210\1\160\1\0\11\160\5\116"+
    "\1\211\1\212\35\116\12\0\1\213\56\0\1\214\43\0"+
    "\1\215\37\0\1\166\40\0\1\216\40\0\1\217\30\0"+
    "\1\173\1\0\42\173\12\0\1\220\42\0\1\221\57\0"+
    "\1\222\43\0\1\223\37\0\1\224\40\0\1\225\40\0"+
    "\1\226\30\0\1\45\1\0\3\45\1\0\23\45\1\0"+
    "\4\45\1\227\1\45\2\0\2\45\1\230\1\156\26\230"+
    "\1\157\13\230\1\160\2\0\25\160\1\231\1\160\1\0"+
    "\11\160\7\0\1\232\53\0\1\166\42\0\1\166\36\0"+
    "\1\215\50\0\1\233\34\0\1\234\53\0\1\235\42\0"+
    "\1\236\36\0\1\237\50\0\1\240\25\0\1\45\1\0"+
    "\3\45\1\0\23\45\1\0\5\45\1\241\2\0\2\45"+
    "\13\0\1\242\55\0\1\122\31\0\1\243\46\0\1\244"+
    "\52\0\1\245\32\0\1\166\43\0\1\246\40\0\1\247"+
    "\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\1\11\24\1\1\11\2\1\1\11\2\1\1\11"+
    "\4\1\1\11\1\1\1\11\4\1\1\11\4\1\1\11"+
    "\6\1\1\11\1\1\2\11\6\1\23\0\1\1\1\11"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\5\0\1\1"+
    "\1\11\1\0\1\1\2\0\1\11\4\0\1\1\3\0"+
    "\1\11\1\0\1\11\3\0\1\11\1\1\1\0\1\1"+
    "\1\11\7\0\1\11\2\0\1\11\2\0\3\1\3\0"+
    "\2\11\2\0\1\1\2\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** stack for saving lexical states */
  private java.util.Stack<Integer> zzLexicalStateStack =
      new java.util.Stack<>();

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
        private final ApiLexerMultipartBodyManipulator multipartBodyManipulator;

        /**
         * Creates a new scanner
         */
        public ApiLexer() {
            this(null);
        }

        {
            multipartBodyManipulator = new ApiLexerMultipartBodyManipulator();
        }

        public final CharSequence yytext(int offset) {
            return zzBuffer.subSequence(zzStartRead, zzMarkedPos + offset);
        }

        /**
         * 切换状态，会记录切换前的状态
         *
         * @param newState
         */
        public void pushState(int newState) {
            yypush();
            yybegin(newState);
        }

        /**
         * 切换至上一个状态
         */
        public void popState() {
            yypop();
        }

        /**
         * 当路径匹配完成，切换至下一个状态
         */
        private void onPathFinish() {
            if (yylength() == 1) {
                yypushback(yylength());
                pushState(IN_HEADER);
            } else {
                yypushback(yylength());
                pushState(IN_BEFORE_BODY);
            }
        }

        /**
         * 处理ContentType
         */
        private void handleContentTypeHeader() {
            if(!multipartBodyManipulator.isStarted() && multipartBodyManipulator.isMultipartType(yytext())) {
                multipartBodyManipulator.start();
            }else {
                multipartBodyManipulator.trySetBoundary(yytext());
            }
        }

        private int inMessageBodyState() {
            if(multipartBodyManipulator.isStartedAndDefined()) {
                if(multipartBodyManipulator.isInBoundary()) {
                    return IN_MESSAGE_BODY;
                }else {
                    multipartBodyManipulator.setIsInBoundary();
                    return IN_MESSAGE_MULTIPART;
                }
            }
            return IN_MESSAGE_BODY;
        }

        private void reset() {
            multipartBodyManipulator.reset();
            pushState(YYINITIAL);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ApiLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Saves the current lexical state onto stack
   */
  public final void yypush() {
    zzLexicalStateStack.push(yystate());
  }

  /**
   * Loads the current lexical state from stack
   */
  public final void yypop() {
    yybegin(zzLexicalStateStack.pop());
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 51: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 52: break;
          case 3: 
            { yypushback(yylength()); pushState(IN_DESCRIPTION);
            } 
            // fall through
          case 53: break;
          case 4: 
            { pushState(IN_HTTP_TARGET); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 54: break;
          case 5: 
            { yypushback(yylength()); pushState(IN_HTTP_REQUEST_HOST);
            } 
            // fall through
          case 55: break;
          case 6: 
            { onPathFinish();
            } 
            // fall through
          case 56: break;
          case 7: 
            { pushState(IN_HTTP_PATH_SEGMENT); return Api_SLASH;
            } 
            // fall through
          case 57: break;
          case 8: 
            { pushState(IN_HTTP_REQUEST_PORT); return Api_COLON;
            } 
            // fall through
          case 58: break;
          case 9: 
            { pushState(IN_HTTP_QUERY); return Api_QUESTION_MARK;
            } 
            // fall through
          case 59: break;
          case 10: 
            { return Api_HOST_VALUE;
            } 
            // fall through
          case 60: break;
          case 11: 
            { yypushback(yylength()); popState();
            } 
            // fall through
          case 61: break;
          case 12: 
            { return Api_PORT_SEGMENT;
            } 
            // fall through
          case 62: break;
          case 13: 
            { return Api_SEGMENT;
            } 
            // fall through
          case 63: break;
          case 14: 
            { return Api_QUERY_NAME;
            } 
            // fall through
          case 64: break;
          case 15: 
            { pushState(IN_HTTP_QUERY_VALUE); return Api_EQUALS;
            } 
            // fall through
          case 65: break;
          case 16: 
            { return Api_QUERY_VALUE;
            } 
            // fall through
          case 66: break;
          case 17: 
            { popState(); return Api_AMPERSAND;
            } 
            // fall through
          case 67: break;
          case 18: 
            { return Api_HEADER_FIELD_NAME;
            } 
            // fall through
          case 68: break;
          case 19: 
            { pushState(IN_HEADER_VALUE); return Api_COLON;
            } 
            // fall through
          case 69: break;
          case 20: 
            { handleContentTypeHeader(); return Api_HEADER_FIELD_VALUE;
            } 
            // fall through
          case 70: break;
          case 21: 
            { popState(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 71: break;
          case 22: 
            { return Api_SEMICOLON;
            } 
            // fall through
          case 72: break;
          case 23: 
            { if(multipartBodyManipulator.isInBoundary()) pushState(IN_MESSAGE_MULTIPART); else pushState(YYINITIAL); return Api_MESSAGE_TEXT;
            } 
            // fall through
          case 73: break;
          case 24: 
            { return Api_IDENTIFIER;
            } 
            // fall through
          case 74: break;
          case 25: 
            { pushState(IN_DESCRIPTION_KEY); return Api_HYPHEN;
            } 
            // fall through
          case 75: break;
          case 26: 
            { pushState(IN_DESCRIPTION_VALUE); return Api_COLON;
            } 
            // fall through
          case 76: break;
          case 27: 
            { popState(); return Api_DESCRIPTION_KEY;
            } 
            // fall through
          case 77: break;
          case 28: 
            { return Api_LINE_TEXT;
            } 
            // fall through
          case 78: break;
          case 29: 
            { return Api_LINE_COMMENT;
            } 
            // fall through
          case 79: break;
          case 30: 
            { return Api_MULTILINE_COMMENT;
            } 
            // fall through
          case 80: break;
          case 31: 
            { pushState(IN_VARIABLE); return Api_LBRACES;
            } 
            // fall through
          case 81: break;
          case 32: 
            { yypushback(yylength()); pushState(IN_BEFORE_BODY);
            } 
            // fall through
          case 82: break;
          case 33: 
            { pushState(inMessageBodyState()); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 34: 
            { pushState(IN_HEADER); return Api_MESSAGE_BOUNDARY;
            } 
            // fall through
          case 84: break;
          case 35: 
            { popState(); return Api_RBRACES;
            } 
            // fall through
          case 85: break;
          case 36: 
            { yypushback(yylength()); pushState(IN_HTTP_REQUEST);
            } 
            // fall through
          case 86: break;
          case 37: 
            { return Api_SEPARATOR;
            } 
            // fall through
          case 87: break;
          case 38: 
            { return Api_PUT;
            } 
            // fall through
          case 88: break;
          case 39: 
            { return Api_GET;
            } 
            // fall through
          case 89: break;
          case 40: 
            { return Api_SCHEME_SEPARATOR;
            } 
            // fall through
          case 90: break;
          case 41: 
            { return Api_POST;
            } 
            // fall through
          case 91: break;
          case 42: 
            { return Api_HEAD;
            } 
            // fall through
          case 92: break;
          case 43: 
            { return Api_HTTP;
            } 
            // fall through
          case 93: break;
          case 44: 
            { reset(); return Api_MESSAGE_BOUNDARY_END;
            } 
            // fall through
          case 94: break;
          case 45: 
            { return Api_PATCH;
            } 
            // fall through
          case 95: break;
          case 46: 
            { return Api_TRACE;
            } 
            // fall through
          case 96: break;
          case 47: 
            { return Api_HTTPS;
            } 
            // fall through
          case 97: break;
          case 48: 
            { return Api_DELETE;
            } 
            // fall through
          case 98: break;
          case 49: 
            { return Api_OPTIONS;
            } 
            // fall through
          case 99: break;
          case 50: 
            { return Api_CONNECT;
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
