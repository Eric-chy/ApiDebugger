/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package io.chengguo.api.debugger.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static io.chengguo.api.debugger.lang.psi.ApiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/fingerart/Workspace/JAVA/ApiDebugger/grammars/Api.flex</tt>
 */
public class ApiLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_HTTP_REQUEST = 2;
  public static final int IN_HTTP_TARGET = 4;
  public static final int IN_HTTP_REQUEST_HOST = 6;
  public static final int IN_HTTP_REQUEST_PORT = 8;
  public static final int IN_HTTP_PATH_SEGMENT = 10;
  public static final int IN_HTTP_QUERY = 12;
  public static final int IN_HTTP_QUERY_VALUE = 14;
  public static final int IN_HEADER = 16;
  public static final int IN_HEADER_VALUE = 18;
  public static final int BEFORE_BODY = 20;
  public static final int IN_MESSAGE_BODY = 22;
  public static final int IN_MESSAGE_MULTIPART = 24;
  public static final int IN_INPUT_FILE_PATH = 26;
  public static final int IN_VARIABLE = 28;
  public static final int IN_DESCRIPTION = 30;
  public static final int IN_DESCRIPTION_KEY = 32;
  public static final int IN_DESCRIPTION_VALUE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\32\1\1\1\0\1\32\1\1\22\0\1\2\2\0\1\30\2\0\1\44\3\0\1\6\2\0\1\35\1"+
    "\0\1\5\12\4\1\31\1\33\1\34\1\43\1\0\1\42\1\0\1\20\1\3\1\25\1\21\1\16\1\3\1"+
    "\15\1\17\1\12\2\3\1\23\1\3\1\13\1\7\1\10\1\3\1\24\1\14\1\11\1\22\5\3\4\0\1"+
    "\3\1\0\7\3\1\36\7\3\1\40\2\3\1\41\1\37\6\3\1\26\1\0\1\27\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\1\2\11\1\1\3\1\4\7\1\1\5"+
    "\1\6\1\7\1\10\1\5\1\11\1\12\2\13\1\1"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\2"+
    "\1\22\1\23\1\24\1\25\1\2\1\24\1\26\2\1"+
    "\1\27\2\1\1\27\1\1\1\30\1\31\1\1\1\25"+
    "\1\2\1\32\1\33\1\34\1\2\1\35\1\2\1\36"+
    "\1\37\23\0\1\5\1\40\1\0\1\41\2\0\1\13"+
    "\1\0\1\42\4\0\1\43\1\0\1\44\1\0\1\45"+
    "\1\0\1\37\2\0\1\46\4\0\1\47\3\0\1\50"+
    "\1\0\1\51\3\0\1\52\1\5\1\53\1\44\1\37"+
    "\7\0\1\54\2\0\1\55\2\0\1\56\1\57\3\0"+
    "\1\60\1\61\2\0\1\62\2\0\1\63\1\0\1\64"+
    "\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b"+
    "\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353"+
    "\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u029a\0\u0431\0\u0456"+
    "\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e"+
    "\0\u029a\0\u05a3\0\u05c8\0\u029a\0\u05ed\0\u0612\0\u029a\0\u0637"+
    "\0\u065c\0\u0681\0\u06a6\0\u029a\0\u06cb\0\u029a\0\u06f0\0\u0715"+
    "\0\u073a\0\u075f\0\u029a\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u029a"+
    "\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b"+
    "\0\u0940\0\u0965\0\u029a\0\u098a\0\u029a\0\u029a\0\u09af\0\u09d4"+
    "\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc"+
    "\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24"+
    "\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c"+
    "\0\u029a\0\u06f0\0\u0d71\0\u0715\0\u0784\0\u0d96\0\u07a9\0\u0dbb"+
    "\0\u0818\0\u083d\0\u0de0\0\u0e05\0\u029a\0\u0e2a\0\u0e4f\0\u091b"+
    "\0\u029a\0\u09af\0\u0e74\0\u0e99\0\u0ebe\0\u029a\0\u0ee3\0\u0f08"+
    "\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u029a\0\u100b"+
    "\0\u029a\0\u1030\0\u1055\0\u107a\0\u029a\0\u109f\0\u029a\0\u10c4"+
    "\0\u029a\0\u0e74\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2"+
    "\0\u029a\0\u11c7\0\u11ec\0\u029a\0\u1211\0\u1236\0\u125b\0\u10c4"+
    "\0\u1280\0\u12a5\0\u12ca\0\u029a\0\u029a\0\u12ef\0\u1314\0\u0559"+
    "\0\u1339\0\u135e\0\u029a\0\u1383\0\u029a\0\u029a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\2\24\2\23\1\25\1\23\1\26\1\27\1\30"+
    "\3\23\1\31\1\23\1\32\1\23\1\33\3\23\1\34"+
    "\2\23\1\35\1\23\1\24\2\23\1\36\11\23\1\37"+
    "\4\23\1\40\1\41\1\42\3\23\1\43\1\23\1\44"+
    "\1\23\1\45\3\23\1\46\4\23\1\37\12\23\1\47"+
    "\1\50\3\47\1\51\22\47\1\23\1\52\4\47\1\53"+
    "\3\47\1\54\2\47\1\55\1\56\3\55\1\57\20\55"+
    "\1\60\1\55\2\57\10\55\1\57\2\55\1\23\1\57"+
    "\2\23\1\61\1\57\20\23\1\60\1\23\1\57\11\23"+
    "\1\57\2\23\1\62\1\56\3\62\1\57\22\62\1\57"+
    "\11\62\1\57\2\62\1\63\1\56\24\63\1\60\14\63"+
    "\1\64\1\63\1\65\1\56\24\65\1\60\15\65\1\66"+
    "\1\67\1\70\1\71\23\67\1\72\2\67\1\73\1\71"+
    "\12\67\1\74\1\75\1\76\23\74\1\77\3\74\1\76"+
    "\1\100\11\74\1\23\1\101\1\102\27\23\1\102\12\23"+
    "\1\103\2\24\25\103\1\104\1\103\1\24\1\103\1\105"+
    "\10\103\1\106\2\24\25\106\1\104\1\106\1\24\1\106"+
    "\1\105\1\107\7\106\1\110\2\24\27\110\1\24\12\110"+
    "\3\23\1\111\3\23\17\111\1\23\1\112\6\23\4\111"+
    "\4\23\1\113\1\114\26\23\1\115\1\114\2\23\1\116"+
    "\7\23\1\117\1\23\1\114\26\117\1\23\1\120\2\117"+
    "\1\23\7\117\1\121\1\57\1\114\27\121\1\122\12\121"+
    "\46\0\2\24\27\0\1\24\17\0\1\123\1\124\46\0"+
    "\1\125\43\0\1\126\10\0\1\127\1\0\1\130\46\0"+
    "\1\131\36\0\1\130\44\0\1\132\44\0\1\133\35\0"+
    "\1\134\65\0\1\135\16\0\1\37\27\0\1\37\22\0"+
    "\1\136\43\0\1\137\10\0\1\140\1\0\1\141\46\0"+
    "\1\142\36\0\1\143\44\0\1\144\44\0\1\145\35\0"+
    "\1\146\35\0\1\47\1\0\3\47\1\0\22\47\2\0"+
    "\10\47\1\0\2\47\1\0\1\50\50\0\1\147\37\0"+
    "\1\47\1\0\3\47\1\0\22\47\2\0\5\47\1\150"+
    "\2\47\1\0\2\47\1\55\1\0\3\55\1\0\20\55"+
    "\1\0\1\55\2\0\10\55\1\0\2\55\1\0\1\56"+
    "\71\0\1\151\22\0\1\61\40\0\1\62\1\0\3\62"+
    "\1\0\22\62\1\0\11\62\1\0\2\62\1\63\1\0"+
    "\24\63\1\0\14\63\1\0\1\63\1\65\1\0\24\65"+
    "\1\0\15\65\1\0\1\67\1\0\1\152\23\67\1\0"+
    "\2\67\2\0\12\67\1\0\1\153\44\0\1\154\1\71"+
    "\27\0\1\71\12\0\1\67\1\0\1\152\23\67\1\151"+
    "\2\67\2\0\12\67\1\74\1\0\1\155\23\74\1\0"+
    "\3\74\1\155\1\0\11\74\1\0\1\156\44\0\1\157"+
    "\1\76\27\0\1\76\12\0\1\74\1\0\1\155\23\74"+
    "\1\151\3\74\1\155\1\0\11\74\1\0\1\160\44\0"+
    "\1\161\1\162\27\0\1\162\12\0\1\103\1\163\43\103"+
    "\30\0\1\164\16\0\1\165\42\0\1\106\1\166\43\106"+
    "\35\0\1\167\7\0\1\110\1\0\1\170\27\110\1\170"+
    "\12\110\3\0\2\111\2\0\17\111\10\0\4\111\32\0"+
    "\1\171\17\0\1\114\27\0\1\114\12\0\1\117\1\0"+
    "\1\172\26\117\1\0\14\117\1\0\1\120\26\117\1\0"+
    "\1\120\12\117\1\121\1\0\44\121\1\0\1\122\27\121"+
    "\1\122\12\121\1\123\1\0\43\123\6\124\1\173\36\124"+
    "\11\0\1\174\47\0\1\130\41\0\1\175\44\0\1\176"+
    "\53\0\1\177\44\0\1\200\47\0\1\201\34\0\1\202"+
    "\61\0\1\203\25\0\1\204\47\0\1\205\41\0\1\206"+
    "\44\0\1\207\53\0\1\210\35\0\1\211\53\0\1\212"+
    "\47\0\1\213\34\0\1\214\36\0\1\215\37\0\1\47"+
    "\1\0\3\47\1\0\22\47\2\0\5\47\1\216\2\47"+
    "\1\0\2\47\1\0\2\153\27\0\1\153\13\0\2\156"+
    "\27\0\1\156\13\0\2\160\27\0\1\160\12\0\1\103"+
    "\1\163\26\103\1\0\3\103\1\0\10\103\30\0\1\217"+
    "\14\0\1\106\1\166\26\106\1\0\3\106\2\0\7\106"+
    "\1\167\2\0\27\167\1\0\2\167\1\220\7\167\5\124"+
    "\1\221\1\222\36\124\12\0\1\223\57\0\1\224\44\0"+
    "\1\225\40\0\1\176\41\0\1\226\41\0\1\227\31\0"+
    "\1\203\1\0\43\203\12\0\1\230\43\0\1\231\60\0"+
    "\1\232\44\0\1\233\40\0\1\234\41\0\1\235\41\0"+
    "\1\236\31\0\1\47\1\0\3\47\1\0\22\47\2\0"+
    "\6\47\1\237\1\47\1\0\2\47\1\167\2\0\27\167"+
    "\1\0\2\167\1\240\7\167\7\0\1\241\54\0\1\176"+
    "\43\0\1\176\37\0\1\225\51\0\1\242\35\0\1\243"+
    "\54\0\1\244\43\0\1\245\37\0\1\246\51\0\1\247"+
    "\26\0\1\47\1\0\3\47\1\0\22\47\2\0\7\47"+
    "\1\250\1\0\2\47\13\0\1\251\56\0\1\130\32\0"+
    "\1\252\47\0\1\253\53\0\1\254\33\0\1\176\44\0"+
    "\1\255\41\0\1\256\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5032];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\1\11\12\1\1\11\12\1\1\11\2\1\1\11"+
    "\2\1\1\11\4\1\1\11\1\1\1\11\4\1\1\11"+
    "\4\1\1\11\12\1\1\11\1\1\2\11\6\1\23\0"+
    "\1\1\1\11\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\4\0\1\11\1\0\1\1\1\0\1\11\1\0\1\1"+
    "\2\0\1\11\4\0\1\1\3\0\1\11\1\0\1\11"+
    "\3\0\1\11\1\1\1\11\1\1\1\11\7\0\1\11"+
    "\2\0\1\11\2\0\2\1\3\0\2\11\2\0\1\1"+
    "\2\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** stack for saving lexical states */
  private java.util.Stack<Integer> zzLexicalStateStack =
      new java.util.Stack<>();

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
        private final ApiLexerMultipartBodyManipulator multipartBodyManipulator;

        /**
         * Creates a new scanner
         */
        public ApiLexer() {
            this(null);
        }

        {
            multipartBodyManipulator = new ApiLexerMultipartBodyManipulator();
        }

        public final CharSequence yytext(int offset) {
            return zzBuffer.subSequence(zzStartRead, zzMarkedPos + offset);
        }

        /**
         * 切换状态，会记录切换前的状态
         *
         * @param newState
         */
        public void pushState(int newState) {
            yypush();
            yybegin(newState);
        }

        /**
         * 切换至上一个状态
         */
        public void popState() {
            yypop();
        }

        /**
         * 当路径匹配完成，切换至下一个状态
         */
        private void onPathFinish() {
            if (yylength() == 1) {
                yypushback(yylength());
                pushState(IN_HEADER);
            } else {
                yypushback(yylength());
                pushState(BEFORE_BODY);
            }
        }

        /**
         * 处理ContentType
         */
        private void handleContentTypeHeader() {
            if(!multipartBodyManipulator.isStarted() && multipartBodyManipulator.isMultipartType(yytext())) {
                multipartBodyManipulator.start();
            }else {
                multipartBodyManipulator.trySetBoundary(yytext());
            }
        }

        private int inMessageBodyState() {
            if(multipartBodyManipulator.isStartedAndDefined()) {
                return IN_MESSAGE_MULTIPART;
            }
            return IN_MESSAGE_BODY;
        }

        private void reset() {
            multipartBodyManipulator.reset();
            pushState(YYINITIAL);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ApiLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Saves the current lexical state onto stack
   */
  public final void yypush() {
    zzLexicalStateStack.push(yystate());
  }

  /**
   * Loads the current lexical state from stack
   */
  public final void yypop() {
    yybegin(zzLexicalStateStack.pop());
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 55: break;
          case 3: 
            { yypushback(yylength()); pushState(IN_DESCRIPTION);
            } 
            // fall through
          case 56: break;
          case 4: 
            { pushState(IN_HTTP_TARGET); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 57: break;
          case 5: 
            { yypushback(yylength()); pushState(IN_HTTP_REQUEST_HOST);
            } 
            // fall through
          case 58: break;
          case 6: 
            { onPathFinish();
            } 
            // fall through
          case 59: break;
          case 7: 
            { pushState(IN_HTTP_PATH_SEGMENT); return Api_SLASH;
            } 
            // fall through
          case 60: break;
          case 8: 
            { pushState(IN_HTTP_REQUEST_PORT); return Api_COLON;
            } 
            // fall through
          case 61: break;
          case 9: 
            { pushState(IN_HTTP_QUERY); return Api_QUESTION_MARK;
            } 
            // fall through
          case 62: break;
          case 10: 
            { return Api_HOST_VALUE;
            } 
            // fall through
          case 63: break;
          case 11: 
            { yypushback(yylength()); popState();
            } 
            // fall through
          case 64: break;
          case 12: 
            { return Api_PORT_SEGMENT;
            } 
            // fall through
          case 65: break;
          case 13: 
            { return Api_SEGMENT;
            } 
            // fall through
          case 66: break;
          case 14: 
            { return Api_QUERY_NAME;
            } 
            // fall through
          case 67: break;
          case 15: 
            { pushState(IN_HTTP_QUERY_VALUE); return Api_EQUALS;
            } 
            // fall through
          case 68: break;
          case 16: 
            { return Api_QUERY_VALUE;
            } 
            // fall through
          case 69: break;
          case 17: 
            { popState(); return Api_AMPERSAND;
            } 
            // fall through
          case 70: break;
          case 18: 
            { return Api_HEADER_FIELD_NAME;
            } 
            // fall through
          case 71: break;
          case 19: 
            { pushState(IN_HEADER_VALUE); return Api_COLON;
            } 
            // fall through
          case 72: break;
          case 20: 
            { handleContentTypeHeader(); return Api_HEADER_FIELD_VALUE;
            } 
            // fall through
          case 73: break;
          case 21: 
            { popState(); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 22: 
            { return Api_SEMICOLON;
            } 
            // fall through
          case 75: break;
          case 23: 
            { return Api_MESSAGE_TEXT;
            } 
            // fall through
          case 76: break;
          case 24: 
            { popState(); return Api_RELATIVE_FILE_PATH;
            } 
            // fall through
          case 77: break;
          case 25: 
            { return Api_IDENTIFIER;
            } 
            // fall through
          case 78: break;
          case 26: 
            { pushState(IN_DESCRIPTION_VALUE); return Api_COLON;
            } 
            // fall through
          case 79: break;
          case 27: 
            { pushState(IN_DESCRIPTION_KEY); return Api_HYPHEN;
            } 
            // fall through
          case 80: break;
          case 28: 
            { popState(); return Api_DESCRIPTION_KEY;
            } 
            // fall through
          case 81: break;
          case 29: 
            { return Api_LINE_TEXT;
            } 
            // fall through
          case 82: break;
          case 30: 
            { return Api_LINE_COMMENT;
            } 
            // fall through
          case 83: break;
          case 31: 
            { return Api_MULTILINE_COMMENT;
            } 
            // fall through
          case 84: break;
          case 32: 
            { pushState(IN_VARIABLE); return Api_LBRACES;
            } 
            // fall through
          case 85: break;
          case 33: 
            { yypushback(yylength()); pushState(BEFORE_BODY);
            } 
            // fall through
          case 86: break;
          case 34: 
            { pushState(inMessageBodyState()); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 87: break;
          case 35: 
            { pushState(IN_INPUT_FILE_PATH); return Api_INPUT_SIGNAL;
            } 
            // fall through
          case 88: break;
          case 36: 
            { pushState(IN_HEADER); return Api_MESSAGE_BOUNDARY;
            } 
            // fall through
          case 89: break;
          case 37: 
            { popState(); return Api_RBRACES;
            } 
            // fall through
          case 90: break;
          case 38: 
            { yypushback(yylength()); pushState(IN_HTTP_REQUEST);
            } 
            // fall through
          case 91: break;
          case 39: 
            { return Api_SEPARATOR;
            } 
            // fall through
          case 92: break;
          case 40: 
            { return Api_PUT;
            } 
            // fall through
          case 93: break;
          case 41: 
            { return Api_GET;
            } 
            // fall through
          case 94: break;
          case 42: 
            { return Api_SCHEME_SEPARATOR;
            } 
            // fall through
          case 95: break;
          case 43: 
            { yypushback(yylength()); reset();
            } 
            // fall through
          case 96: break;
          case 44: 
            { return Api_POST;
            } 
            // fall through
          case 97: break;
          case 45: 
            { return Api_HEAD;
            } 
            // fall through
          case 98: break;
          case 46: 
            { return Api_HTTP;
            } 
            // fall through
          case 99: break;
          case 47: 
            { reset(); return Api_MESSAGE_BOUNDARY_END;
            } 
            // fall through
          case 100: break;
          case 48: 
            { return Api_PATCH;
            } 
            // fall through
          case 101: break;
          case 49: 
            { return Api_TRACE;
            } 
            // fall through
          case 102: break;
          case 50: 
            { return Api_HTTPS;
            } 
            // fall through
          case 103: break;
          case 51: 
            { return Api_DELETE;
            } 
            // fall through
          case 104: break;
          case 52: 
            { return Api_OPTIONS;
            } 
            // fall through
          case 105: break;
          case 53: 
            { return Api_CONNECT;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
